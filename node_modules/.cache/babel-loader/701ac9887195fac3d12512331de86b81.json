{"ast":null,"code":"var _jsxFileName = \"/Users/lizaz/fed-exam-category-tree-blcts/src/components/TreesMain.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Branch } from './branch';\nimport { EditComponent } from './EditComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const TreesMain = props => {\n  _s();\n\n  const {\n    mainTrees,\n    onSetBranches,\n    branches\n  } = props;\n  const [isShowKids, setIsShowKids] = useState(true);\n  const [isEditorOpen, setIsEditorOpen] = useState(false);\n  const [openedTreeId, setOpenedTreeId] = useState('');\n  const [editedName, setEditedName] = useState('');\n  const ref = useRef(null);\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.focus();\n    }\n\n    if (openedTreeId !== null) {\n      const editedTree = mainTrees.filter(tree => tree.id === openedTreeId)[0];\n      setEditedName(editedTree.name);\n    }\n  }, []);\n\n  const editHandler = event => {\n    event.preventDefault();\n\n    if (openedTreeId) {\n      editTree(openedTreeId, editedName);\n      const editedTodo = mainTrees.find(tree => tree.id === openedTreeId);\n\n      if (editedTree) {\n        editedTree.name = editedName;\n      }\n\n      setTodos(todos.map(todo => todo.id === openedTodoId ? editedTodo : todo));\n    }\n\n    setIsEditorOpen(false);\n  }; // const toggler = (todoId: number) => {\n  //   setIsLoading(true);\n  //   setOpenedTodoId(todoId);\n  //   const changedTodo = todos.find(todo => todoId === todo.id);\n  //   const newTodo = { ...changedTodo };\n  //   const todoTitle = changedTodo?.title;\n  //   if (changedTodo) {\n  //     newTodo.completed = !changedTodo.completed;\n  //     editTodo(todoId, todoTitle, newTodo.completed);\n  //   }\n  //   setTodos((prevTodos: Todo[]) => prevTodos.map(todo => {\n  //     if (todo.id === newTodo.id) {\n  //       return newTodo;\n  //     }\n  //     return todo;\n  //   }));\n  //   setIsLoading(false);\n  // };\n  // const onDelete = (todoId: number) => {\n  //   deleteTodos(todoId);\n  //   setTodos((prev: Todo[]) => prev.filter(todo => todo.id !== todoId));\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"treeapp__main\",\n    \"data-cy\": \"TreeList\",\n    children: mainTrees.map(tree => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"tree__show\",\n        \"data-cy\": \"TreeTogglerButton\",\n        onClick: () => setIsShowKids(false),\n        children: isShowKids ? '-' : '+'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-cy\": \"Tree\",\n        children: isEditorOpen && tree.id === openedTreeId ? /*#__PURE__*/_jsxDEV(EditComponent, {\n          editHandler: editHandler,\n          ref: ref,\n          editedName: editedName,\n          onSetEditedName: setEditedName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(Branch, {\n          id: tree.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 19\n        }, this)\n      }, tree.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this) // {/* {isLoading && todo.id === openedTodoId && <Loader />} */}\n  ;\n};\n\n_s(TreesMain, \"CoHN05QmdBgcAmKMND8qcGWm0bM=\");\n\n_c = TreesMain;\n\nvar _c;\n\n$RefreshReg$(_c, \"TreesMain\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Branch","EditComponent","TreesMain","props","mainTrees","onSetBranches","branches","isShowKids","setIsShowKids","isEditorOpen","setIsEditorOpen","openedTreeId","setOpenedTreeId","editedName","setEditedName","ref","current","focus","editedTree","filter","tree","id","name","editHandler","event","preventDefault","editTree","editedTodo","find","setTodos","todos","map","todo","openedTodoId"],"sources":["/Users/lizaz/fed-exam-category-tree-blcts/src/components/TreesMain.tsx"],"sourcesContent":["import React, {  FC, useState, FormEvent, useRef, useEffect } from 'react';\nimport { Tree } from '../types/Tree';\nimport { Branch } from './branch';\nimport { EditComponent } from './EditComponent';\nimport { Loader } from './Loader';\n\ninterface Props {\n  mainTrees: Tree[],\n  onSetBranches: (v: Tree[]) => void,\n  branches: Tree[],\n}\nexport const TreesMain: FC <Props> = (props) => {\n  const { mainTrees, onSetBranches, branches } = props;\n  const [isShowKids, setIsShowKids] = useState(true);\n  const [isEditorOpen, setIsEditorOpen] = useState(false);\n  const [openedTreeId, setOpenedTreeId] = useState('');\n  const [editedName, setEditedName] = useState('');\n  const ref = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.focus();\n    }\n\n    if (openedTreeId !== null) {\n      const editedTree = mainTrees.filter(tree => tree.id === openedTreeId)[0];\n      setEditedName(editedTree.name)\n    }\n  }, []);\n\n  const editHandler = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (openedTreeId) {\n      editTree(openedTreeId, editedName);\n      const editedTodo = mainTrees.find(tree => tree.id === openedTreeId);\n\n      if (editedTree) {\n        editedTree.name = editedName;\n      }\n\n      setTodos(todos.map(todo => (todo.id === openedTodoId\n        ? editedTodo\n        : todo\n      )));\n    }\n\n    setIsEditorOpen(false);\n  };\n\n  // const toggler = (todoId: number) => {\n  //   setIsLoading(true);\n  //   setOpenedTodoId(todoId);\n  //   const changedTodo = todos.find(todo => todoId === todo.id);\n  //   const newTodo = { ...changedTodo };\n  //   const todoTitle = changedTodo?.title;\n\n  //   if (changedTodo) {\n  //     newTodo.completed = !changedTodo.completed;\n\n  //     editTodo(todoId, todoTitle, newTodo.completed);\n  //   }\n\n  //   setTodos((prevTodos: Todo[]) => prevTodos.map(todo => {\n  //     if (todo.id === newTodo.id) {\n  //       return newTodo;\n  //     }\n\n  //     return todo;\n  //   }));\n  //   setIsLoading(false);\n  // };\n\n  // const onDelete = (todoId: number) => {\n  //   deleteTodos(todoId);\n  //   setTodos((prev: Todo[]) => prev.filter(todo => todo.id !== todoId));\n  // };\n  \n\n  return (\n    <section className=\"treeapp__main\" data-cy=\"TreeList\">\n      {mainTrees.map(tree => (\n          <>\n            <button\n              type=\"button\"\n              className=\"tree__show\"\n              data-cy=\"TreeTogglerButton\"\n              onClick={() => (setIsShowKids(false))}\n            >\n              {isShowKids\n                ? '-'\n                : '+'\n              }\n            </button>\n\n            <div\n              data-cy=\"Tree\"\n              key={tree.id}\n            >\n              { isEditorOpen && tree.id === openedTreeId\n                ? <EditComponent editHandler={editHandler} ref={ref} editedName={editedName} onSetEditedName={setEditedName}/>\n                : <Branch id={tree.id} />\n              }\n            </div>\n          </>\n      ))}\n    </section>\n          // {/* {isLoading && todo.id === openedTodoId && <Loader />} */}\n  )\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}