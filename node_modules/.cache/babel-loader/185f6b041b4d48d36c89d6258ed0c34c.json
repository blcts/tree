{"ast":null,"code":"var _jsxFileName = \"/Users/lizaz/fed-exam-category-tree-blcts/src/components/treesMain.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const TreesMain = props => {\n  _s();\n\n  const {\n    mainTrees\n  } = props;\n  const [isShowKids, setIsShowKids] = useState(true);\n  const [isEditorOpen, setIsEditorOpen] = useState(false);\n  const [openedTreeId, setOpenedTreeId] = useState('');\n  const [editedName, setEditedName] = useState('');\n  const ref = useRef(null);\n  useEffect(() => {\n    // if (ref.current) {\n    //   ref.current.focus();\n    // }\n    if (openedTreeId !== null) {\n      const editedTree = mainTrees.filter(tree => tree.id === openedTreeId)[0];\n      setEditedName(editedTree.name);\n    }\n  }, []);\n\n  const editHandler = event => {\n    // setIsLoading(true);\n    event.preventDefault(); //   if (openedTreeId) {\n    //     editTree(openedTreeId, editedName);\n    //     const editedTodo = mainTrees.find(tree => tree.id === openedTreeId);\n    //     if (editedTree) {\n    //       editedTree.name = editedName;\n    //     }\n    //     setTodos(todos.map(todo => (todo.id === openedTodoId\n    //       ? editedTodo\n    //       : todo\n    //     )));\n    //   }\n    //   setIsEditorOpen(false);\n    //   setIsLoading(false);\n    // };\n    // const toggler = (todoId: number) => {\n    //   setIsLoading(true);\n    //   setOpenedTodoId(todoId);\n    //   const changedTodo = todos.find(todo => todoId === todo.id);\n    //   const newTodo = { ...changedTodo };\n    //   const todoTitle = changedTodo?.title;\n    //   if (changedTodo) {\n    //     newTodo.completed = !changedTodo.completed;\n    //     editTodo(todoId, todoTitle, newTodo.completed);\n    //   }\n    //   setTodos((prevTodos: Todo[]) => prevTodos.map(todo => {\n    //     if (todo.id === newTodo.id) {\n    //       return newTodo;\n    //     }\n    //     return todo;\n    //   }));\n    //   setIsLoading(false);\n    // };\n    // const onDelete = (todoId: number) => {\n    //   deleteTodos(todoId);\n    //   setTodos((prev: Todo[]) => prev.filter(todo => todo.id !== todoId));\n    // };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"treeapp__main\",\n    \"data-cy\": \"TreeList\",\n    children: mainTrees.map(tree => tree.childId.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"tree__show\",\n        \"data-cy\": \"TreeTogglerButton\",\n        onClick: () => setIsShowKids(false),\n        children: isShowKids ? '-' : '+'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-cy\": \"Tree\",\n        children: isEditorOpen && tree.id === openedTreeId ? /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: editHandler,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            ref: ref,\n            \"data-cy\": \"TreeNameField\",\n            type: \"text\",\n            className: \"tree__name-field\",\n            placeholder: \"Rename please\",\n            value: editedName,\n            onChange: event => setEditedName(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          \"data-cy\": \"TodoTitle\",\n          className: \"todo__title\",\n          onDoubleClick: () => {\n            setIsEditorOpen(true);\n            setOpenedTreeId(tree.id);\n            setEditedName(tree.name);\n          },\n          children: tree.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }, this)\n      }, tree.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n      \"data-cy\": \"TreeName\",\n      className: \"tree__name\",\n      onDoubleClick: () => {\n        setIsEditorOpen(true);\n        setOpenedTreeId(tree.id);\n        setEditedName(tree.name);\n      },\n      children: tree.name\n    }, tree.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this) // {/* {isLoading && todo.id === openedTodoId && <Loader />} */}\n  ;\n};\n\n_s(TreesMain, \"CoHN05QmdBgcAmKMND8qcGWm0bM=\");\n\n_c = TreesMain;\n\nvar _c;\n\n$RefreshReg$(_c, \"TreesMain\");","map":{"version":3,"names":["React","useState","useRef","useEffect","TreesMain","props","mainTrees","isShowKids","setIsShowKids","isEditorOpen","setIsEditorOpen","openedTreeId","setOpenedTreeId","editedName","setEditedName","ref","editedTree","filter","tree","id","name","editHandler","event","preventDefault","map","childId","length","target","value"],"sources":["/Users/lizaz/fed-exam-category-tree-blcts/src/components/treesMain.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport React, {  FC, useState, FormEvent, useRef, useEffect } from 'react';\nimport { MainTree } from '../types/Tree';\nimport { Loader } from './Loader';\n\ninterface Props {\n  mainTrees: MainTree[]\n}\nexport const TreesMain: FC <Props> = (props) => {\n  const { mainTrees } = props;\n  const [isShowKids, setIsShowKids] = useState(true);\n  const [isEditorOpen, setIsEditorOpen] = useState(false);\n  const [openedTreeId, setOpenedTreeId] = useState('');\n  const [editedName, setEditedName] = useState('');\n  const ref = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    // if (ref.current) {\n    //   ref.current.focus();\n    // }\n    if (openedTreeId !== null) {\n      const editedTree = mainTrees.filter(tree => tree.id === openedTreeId)[0];\n      setEditedName(editedTree.name)\n    }\n  }, []);\n\n  const editHandler = (event: FormEvent) => {\n    // setIsLoading(true);\n    event.preventDefault();\n\n  //   if (openedTreeId) {\n  //     editTree(openedTreeId, editedName);\n  //     const editedTodo = mainTrees.find(tree => tree.id === openedTreeId);\n\n  //     if (editedTree) {\n  //       editedTree.name = editedName;\n  //     }\n\n  //     setTodos(todos.map(todo => (todo.id === openedTodoId\n  //       ? editedTodo\n  //       : todo\n  //     )));\n  //   }\n\n  //   setIsEditorOpen(false);\n  //   setIsLoading(false);\n  // };\n\n  // const toggler = (todoId: number) => {\n  //   setIsLoading(true);\n  //   setOpenedTodoId(todoId);\n  //   const changedTodo = todos.find(todo => todoId === todo.id);\n  //   const newTodo = { ...changedTodo };\n  //   const todoTitle = changedTodo?.title;\n\n  //   if (changedTodo) {\n  //     newTodo.completed = !changedTodo.completed;\n\n  //     editTodo(todoId, todoTitle, newTodo.completed);\n  //   }\n\n  //   setTodos((prevTodos: Todo[]) => prevTodos.map(todo => {\n  //     if (todo.id === newTodo.id) {\n  //       return newTodo;\n  //     }\n\n  //     return todo;\n  //   }));\n  //   setIsLoading(false);\n  // };\n\n  // const onDelete = (todoId: number) => {\n  //   deleteTodos(todoId);\n  //   setTodos((prev: Todo[]) => prev.filter(todo => todo.id !== todoId));\n  // };\n  }\n\n  return (\n    <section className=\"treeapp__main\" data-cy=\"TreeList\">\n      {mainTrees.map(tree => (\n        (tree.childId.length > 0)\n          ? \n          <>\n            <button\n              type=\"button\"\n              className=\"tree__show\"\n              data-cy=\"TreeTogglerButton\"\n              onClick={() => (setIsShowKids(false))}\n            >\n              {isShowKids\n                ? '-'\n                : '+'\n              }\n            </button>\n\n            <div\n              data-cy=\"Tree\"\n              key={tree.id}\n            >\n\n            { isEditorOpen && tree.id === openedTreeId\n              ? (\n                <form onSubmit={editHandler}>\n                  <input\n                    ref={ref}\n                    data-cy=\"TreeNameField\"\n                    type=\"text\"\n                    className=\"tree__name-field\"\n                    placeholder='Rename please'\n                    value={editedName}\n                    onChange={(event) => setEditedName(event.target.value)}\n                  />\n                </form>\n              )\n              : (\n                <span\n                  data-cy=\"TodoTitle\"\n                  className=\"todo__title\"\n                  onDoubleClick={() => {\n                    setIsEditorOpen(true);\n                    setOpenedTreeId(tree.id);\n                    setEditedName(tree.name);\n                  }}\n                >\n                  {tree.name}\n                </span>\n              )\n            }\n\n            \n            </div>\n          </>\n\n          : <span\n              key={tree.id}\n              data-cy=\"TreeName\"\n              className=\"tree__name\"\n              onDoubleClick={() => {\n                setIsEditorOpen(true);\n                setOpenedTreeId(tree.id);\n                setEditedName(tree.name);\n              }}\n            >\n              {tree.name}\n            </span>\n      ))}\n    </section>\n          // {/* {isLoading && todo.id === openedTodoId && <Loader />} */}\n  )\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}